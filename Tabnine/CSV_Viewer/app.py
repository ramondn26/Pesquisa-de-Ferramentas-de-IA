
import streamlit as st
import pandas as pd
import logging
import time
from datetime import datetime
from utils import (
    load_csv_file,
    get_dataframe_info,
    filter_dataframe_by_text,
    limit_dataframe_rows,
    calculate_numeric_statistics,
    calculate_summary_statistics,
    prepare_chart_data,
    calculate_chart_series_statistics,
    get_data_type_summary,
    create_info_dataframes
)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # Log apenas no console
    ]
)

logger = logging.getLogger(__name__)

"""
CSV Upload and Analysis App

Este m√≥dulo implementa uma aplica√ß√£o Streamlit para upload, visualiza√ß√£o e an√°lise
de arquivos CSV. A aplica√ß√£o oferece funcionalidades para:

- Upload de arquivos CSV com valida√ß√£o
- Visualiza√ß√£o interativa dos dados com filtros de busca
- C√°lculo de estat√≠sticas descritivas para colunas num√©ricas
- Gera√ß√£o de gr√°ficos b√°sicos (linha e barras) usando componentes nativos do Streamlit
- An√°lise de tipos de dados e valores ausentes

Autor: Sistema de An√°lise CSV
Vers√£o: 1.0
"""

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="CSV Upload App", page_icon="üìä", layout="wide")

st.title("üìä Upload de Arquivo CSV")
st.write("Fa√ßa upload de um arquivo **.csv** para carregar os dados em um DataFrame.")

# Se√ß√£o de upload
st.subheader("üìÅ Upload do Arquivo")

uploaded_file = st.file_uploader(
    "Selecione um arquivo CSV", 
    type=["csv"],
    help="Escolha um arquivo .csv do seu computador"
)

if uploaded_file is not None:
    # Log do in√≠cio do upload
    start_time = time.time()
    logger.info(f"Iniciando upload do arquivo: {uploaded_file.name} (tamanho: {uploaded_file.size} bytes)")
    
    # Usar fun√ß√£o do utils para carregar o arquivo
    df, error_message = load_csv_file(uploaded_file)
    
    if df is not None:
        # Calcular dura√ß√£o do upload
        upload_duration = time.time() - start_time
        logger.info(f"Upload conclu√≠do com sucesso - Arquivo: {uploaded_file.name}, "
                   f"Dimens√µes: {df.shape[0]}x{df.shape[1]}, "
                   f"Dura√ß√£o: {upload_duration:.2f}s")
        
        # Armazena no estado da sess√£o
        st.session_state['dataframe'] = df
        st.session_state['filename'] = uploaded_file.name
        
        # Obter informa√ß√µes do DataFrame usando utils
        df_info = get_dataframe_info(df)
        
        # Mensagem de confirma√ß√£o
        st.success(f"‚úÖ Arquivo **{uploaded_file.name}** carregado com sucesso!")
        st.info(f"üìä Dataset cont√©m **{df_info['total_rows']}** linhas e **{df_info['total_columns']}** colunas")
        
        # Pr√©via dos dados
        with st.expander("üëÄ Visualizar pr√©via dos dados"):
            st.dataframe(df.head(10), use_container_width=True)
    else:
        logger.error(f"Erro ao carregar arquivo {uploaded_file.name}: {error_message}")
        st.error(f"‚ùå Erro ao carregar o arquivo: {error_message}")
        st.info("Verifique se o arquivo est√° no formato CSV correto.")

else:
    # Instru√ß√µes quando n√£o h√° arquivo
    st.info("üëÜ Fa√ßa upload de um arquivo CSV usando o bot√£o acima para come√ßar.")
    
    with st.expander("üìã Instru√ß√µes"):
        st.markdown("""
        **Como usar:**
        1. Clique no bot√£o "Browse files" acima
        2. Selecione um arquivo .csv do seu computador
        3. O arquivo ser√° carregado automaticamente
        4. Voc√™ ver√° uma confirma√ß√£o com o n√∫mero de linhas e colunas
        
        **Requisitos do arquivo:**
        - Formato: .csv (valores separados por v√≠rgula)
        - Encoding: UTF-8 (recomendado)
        - Primeira linha deve conter os nomes das colunas
        """)

# Verificar se h√° dados carregados no estado da sess√£o
if 'dataframe' in st.session_state:
    df = st.session_state['dataframe']
    df_info = get_dataframe_info(df)
    
    st.markdown("---")
    st.subheader("üíæ Dados Carregados")
    st.write(f"Arquivo atual: **{st.session_state.get('filename', 'N/A')}**")
    st.write(f"Dimens√µes: **{df_info['total_rows']}** linhas √ó **{df_info['total_columns']}** colunas")
    
    if st.button("üóëÔ∏è Limpar dados carregados"):
        filename = st.session_state.get('filename', 'arquivo desconhecido')
        logger.info(f"Limpando dados carregados do arquivo: {filename}")
        del st.session_state['dataframe']
        del st.session_state['filename']
        st.rerun()

    # Exibi√ß√£o do DataFrame com controles
    st.markdown("---")
    st.subheader("üìã Visualiza√ß√£o dos Dados")
    
    # Controles de filtro e exibi√ß√£o
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_text = st.text_input(
            "üîç Buscar texto nos dados",
            placeholder="Digite um termo para filtrar os dados...",
            help="A busca ser√° feita em todas as colunas de texto"
        )
    
    with col2:
        max_rows = st.number_input(
            "üìä M√°ximo de linhas a exibir",
            min_value=10,
            max_value=10000,
            value=100,
            step=50,
            help="Limite a quantidade de linhas para melhor performance"
        )
    
    # Aplicar filtros usando fun√ß√µes do utils
    start_filter_time = time.time()
    df_display = df.copy()
    original_rows = len(df_display)
    
    # Filtro de busca por texto
    if search_text:
        logger.info(f"Aplicando filtro de busca: '{search_text}' em dataset com {original_rows} linhas")
        
        df_display, found_count = filter_dataframe_by_text(df_display, search_text)
        
        filter_duration = time.time() - start_filter_time
        
        logger.info(f"Filtro aplicado - Termo: '{search_text}', "
                   f"Resultados: {found_count}/{original_rows} linhas, "
                   f"Dura√ß√£o: {filter_duration:.3f}s")
        
        if found_count == 0:
            st.warning(f"‚ö†Ô∏è Nenhum resultado encontrado para '{search_text}'")
        elif len(df_info['text_columns']) == 0:
            st.warning("‚ö†Ô∏è N√£o h√° colunas de texto para realizar a busca")
        else:
            st.info(f"üîç Encontrados {found_count} registros contendo '{search_text}'")
    
    # Limitar n√∫mero de linhas
    df_display, was_limited = limit_dataframe_rows(df_display, max_rows)
    if was_limited:
        st.info(f"üìä Exibindo as primeiras {max_rows} linhas de {len(df)} total")
    
    # Exibir informa√ß√µes do DataFrame filtrado
    st.write(f"**Shape atual:** {df_display.shape[0]} linhas √ó {df_display.shape[1]} colunas")
    
    # Exibir o DataFrame
    st.dataframe(df_display, use_container_width=True, height=500)
    
    # Informa√ß√µes adicionais usando fun√ß√µes do utils
    with st.expander("‚ÑπÔ∏è Informa√ß√µes detalhadas"):
        info_col1, info_col2 = st.columns(2)
        
        types_df, missing_df = create_info_dataframes(df_display)
        
        with info_col1:
            st.markdown("**Tipos de dados:**")
            st.dataframe(types_df, use_container_width=True)
        
        with info_col2:
            st.markdown("**Valores ausentes:**")
            st.dataframe(missing_df, use_container_width=True)
    
    # Se√ß√£o de estat√≠sticas
    st.markdown("---")
    st.subheader("üìä Estat√≠sticas do Dataset")
    
    # Resumo geral do dataset
    st.markdown("### üìã Resumo Geral")
    summary_col1, summary_col2, summary_col3, summary_col4 = st.columns(4)
    
    with summary_col1:
        st.metric("Total de Linhas", f"{df_info['total_rows']:,}")
    
    with summary_col2:
        st.metric("Total de Colunas", f"{df_info['total_columns']:,}")
    
    with summary_col3:
        st.metric("Colunas Num√©ricas", df_info['numeric_count'])
    
    with summary_col4:
        st.metric("Colunas de Texto", df_info['text_count'])
    
    # Estat√≠sticas para colunas num√©ricas
    st.markdown("### üî¢ Estat√≠sticas das Colunas Num√©ricas")
    
    if df_info['numeric_count'] > 0:
        # Seletor de colunas num√©ricas
        default_cols = df_info['numeric_columns'][:5] if len(df_info['numeric_columns']) <= 5 else df_info['numeric_columns'][:3]
        
        selected_numeric_cols = st.multiselect(
            "Selecione as colunas num√©ricas para an√°lise:",
            options=df_info['numeric_columns'],
            default=default_cols,
            help="Escolha quais colunas num√©ricas deseja analisar"
        )
        
        if selected_numeric_cols:
            # Log do c√°lculo de estat√≠sticas
            start_stats_time = time.time()
            logger.info(f"Calculando estat√≠sticas para {len(selected_numeric_cols)} colunas num√©ricas: {selected_numeric_cols}")
            
            # Calcular estat√≠sticas usando fun√ß√£o do utils
            stats_df = calculate_numeric_statistics(df, selected_numeric_cols)
            
            stats_duration = time.time() - start_stats_time
            logger.info(f"Estat√≠sticas calculadas - Colunas: {len(selected_numeric_cols)}, "
                       f"Dura√ß√£o: {stats_duration:.3f}s")
            
            # Exibir tabela de estat√≠sticas
            st.dataframe(stats_df, use_container_width=True, hide_index=True)
            
            # Estat√≠sticas resumidas em m√©tricas usando fun√ß√£o do utils
            summary_stats = calculate_summary_statistics(stats_df)
            
            st.markdown("#### üìà Resumo das Estat√≠sticas Selecionadas")
            metric_col1, metric_col2, metric_col3 = st.columns(3)
            
            with metric_col1:
                st.metric("Soma Total", f"{summary_stats['total_sum']:,.2f}")
            
            with metric_col2:
                st.metric("M√©dia das M√©dias", f"{summary_stats['avg_mean']:.2f}")
            
            with metric_col3:
                st.metric("Total de Valores", f"{summary_stats['total_count']:,}")
            
        else:
            st.info("üëÜ Selecione pelo menos uma coluna num√©rica para ver as estat√≠sticas.")
    
    else:
        # Aviso quando n√£o h√° colunas num√©ricas
        st.warning("‚ö†Ô∏è **N√£o h√° colunas num√©ricas no dataset**")
        st.info("""
        üìù **O que isso significa:**
        - Todas as colunas cont√™m dados de texto, datas ou outros tipos n√£o num√©ricos
        - N√£o √© poss√≠vel calcular m√©dias, somas ou outras estat√≠sticas num√©ricas
        - Considere converter colunas relevantes para formato num√©rico se necess√°rio
        """)
        
        # Mostrar tipos de dados dispon√≠veis
        st.markdown("**Tipos de dados encontrados:**")
        type_summary = get_data_type_summary(df)
        for dtype, count in type_summary.items():
            st.write(f"- **{dtype}**: {count} coluna(s)")

    # Se√ß√£o de gr√°ficos
    st.markdown("---")
    st.subheader("üìà Visualiza√ß√£o Gr√°fica")
    
    # Verificar se h√° colunas num√©ricas para o gr√°fico
    if df_info['numeric_count'] > 0:
        # Controles do gr√°fico
        graph_col1, graph_col2 = st.columns([1, 2])
        
        with graph_col1:
            # Tipo do gr√°fico
            chart_type = st.radio(
                "üìä Tipo do gr√°fico:",
                ["Linha", "Barras"],
                help="Escolha o tipo de visualiza√ß√£o"
            )
        
        with graph_col2:
            # Coluna do eixo X
            all_cols = df.columns.tolist()
            x_options = ["(√≠ndice)"] + all_cols
            
            x_col = st.selectbox(
                "üî¢ Coluna do eixo X:",
                options=x_options,
                help="Escolha a coluna para o eixo horizontal"
            )
        
        # Colunas do eixo Y
        y_cols = st.multiselect(
            "üìä Colunas do eixo Y (apenas num√©ricas):",
            options=df_info['numeric_columns'],
            default=df_info['numeric_columns'][:1] if len(df_info['numeric_columns']) > 0 else [],
            help="Selecione uma ou mais colunas num√©ricas para plotar"
        )
        
        # Controle de limite de dados
        max_points = st.slider(
            "üéØ M√°ximo de pontos no gr√°fico:",
            min_value=50,
            max_value=10000,
            value=200,
            step=50,
            help="Limite a quantidade de pontos para melhor performance"
        )
        
        if y_cols:
            try:
                # Log da prepara√ß√£o do gr√°fico
                start_chart_time = time.time()
                logger.info(f"Preparando gr√°fico - Tipo: {chart_type}, Eixo X: {x_col}, Eixo Y: {y_cols}")
                
                # Preparar dados para o gr√°fico usando fun√ß√£o do utils
                chart_df, chart_info = prepare_chart_data(df, x_col, y_cols, max_points)
                
                chart_duration = time.time() - start_chart_time
                logger.info(f"Dados para gr√°fico preparados - Pontos: {len(chart_df)}, "
                           f"Dura√ß√£o: {chart_duration:.3f}s")
                
                # Mostrar informa√ß√£o sobre limita√ß√£o de dados
                if chart_info['was_limited']:
                    st.info(f"üìä Exibindo os primeiros {len(chart_df)} pontos de {len(df)} total")
                
                # Criar gr√°fico
                if chart_type == "Linha":
                    st.line_chart(chart_df.set_index(chart_info['x_label']), use_container_width=True)
                else:
                    st.bar_chart(chart_df.set_index(chart_info['x_label']), use_container_width=True)
                
                # Informa√ß√µes do gr√°fico
                st.markdown("#### üìã Informa√ß√µes do Gr√°fico")
                info_col1, info_col2, info_col3 = st.columns(3)
                
                with info_col1:
                    st.write(f"**Tipo:** {chart_type}")
                
                with info_col2:
                    st.write(f"**Eixo X:** {chart_info['x_label']}")
                
                with info_col3:
                    st.write(f"**S√©ries Y:** {len(y_cols)}")
                
                # Mostrar estat√≠sticas b√°sicas das s√©ries
                st.markdown("#### üìä Estat√≠sticas das S√©ries Plotadas")
                series_stats_df = calculate_chart_series_statistics(chart_df, y_cols)
                st.dataframe(series_stats_df, use_container_width=True, hide_index=True)
            
            except Exception as e:
                logger.error(f"Erro ao gerar gr√°fico: {str(e)}")
                st.error(f"‚ùå Erro ao gerar o gr√°fico: {str(e)}")
                st.info("Verifique se as colunas selecionadas cont√™m dados v√°lidos para plotagem.")
        
        else:
            st.info("üëÜ Selecione pelo menos uma coluna num√©rica para o eixo Y.")
    
    else:
        # Aviso quando n√£o h√° colunas num√©ricas
        st.warning("‚ö†Ô∏è **N√£o √© poss√≠vel criar gr√°ficos sem colunas num√©ricas**")
        st.info("""
        üìù **Para criar gr√°ficos voc√™ precisa de:**
        - Pelo menos uma coluna com dados num√©ricos
        - Os dados devem estar em formato adequado (n√∫meros, n√£o texto)
        
        üí° **Dica:** Verifique se suas colunas num√©ricas foram carregadas corretamente na se√ß√£o de tipos de dados acima.
        """)
